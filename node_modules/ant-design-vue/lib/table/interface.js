"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterMenuProps = exports.SelectionBoxProps = exports.SelectionCheckboxAllProps = exports.TableProps = exports.TableRowSelection = exports.RowSelectionType = exports.TableLocale = exports.ColumnProps = exports.ColumnFilterItem = void 0;

var _vueTypes = _interopRequireDefault(require("../_util/vue-types"));

var _pagination = require("../pagination");

var _spin = require("../spin");

var _createStore = require("./createStore");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PaginationProps = (0, _pagination.PaginationProps)();
var SpinProps = (0, _spin.SpinProps)(); // export type CompareFn<T> = ((a: T, b: T) => number);

var ColumnFilterItem = _vueTypes.default.shape({
  text: _vueTypes.default.string,
  value: _vueTypes.default.string,
  children: _vueTypes.default.array
}).loose;

exports.ColumnFilterItem = ColumnFilterItem;
var ColumnProps = {
  title: _vueTypes.default.any,
  // key?: React.Key;
  dataIndex: _vueTypes.default.string,
  customRender: _vueTypes.default.func,
  customCell: _vueTypes.default.func,
  customHeaderCell: _vueTypes.default.func,
  align: _vueTypes.default.oneOf(['left', 'right', 'center']),
  ellipsis: _vueTypes.default.bool,
  filters: _vueTypes.default.arrayOf(ColumnFilterItem),
  // onFilter: (value: any, record: T) => PropTypes.bool,
  filterMultiple: _vueTypes.default.bool,
  filterDropdown: _vueTypes.default.any,
  filterDropdownVisible: _vueTypes.default.bool,
  // onFilterDropdownVisibleChange?: (visible: boolean) => void;
  sorter: _vueTypes.default.oneOfType([_vueTypes.default.boolean, _vueTypes.default.func]),
  defaultSortOrder: _vueTypes.default.oneOf(['ascend', 'descend']),
  colSpan: _vueTypes.default.number,
  width: _vueTypes.default.oneOfType([_vueTypes.default.string, _vueTypes.default.number]),
  className: _vueTypes.default.string,
  fixed: _vueTypes.default.oneOfType([_vueTypes.default.bool, _vueTypes.default.oneOf(['left', 'right'])]),
  filterIcon: _vueTypes.default.any,
  filteredValue: _vueTypes.default.array,
  filtered: _vueTypes.default.bool,
  defaultFilteredValue: _vueTypes.default.array,
  sortOrder: _vueTypes.default.oneOfType([_vueTypes.default.bool, _vueTypes.default.oneOf(['ascend', 'descend'])]),
  sortDirections: _vueTypes.default.array // children?: ColumnProps<T>[];
  // onCellClick?: (record: T, event: any) => void;
  // onCell?: (record: T) => any;
  // onHeaderCell?: (props: ColumnProps<T>) => any;

}; // export interface TableComponents {
//   table?: any;
//   header?: {
//     wrapper?: any;
//     row?: any;
//     cell?: any;
//   };
//   body?: {
//     wrapper?: any;
//     row?: any;
//     cell?: any;
//   };
// }

exports.ColumnProps = ColumnProps;

var TableLocale = _vueTypes.default.shape({
  filterTitle: _vueTypes.default.string,
  filterConfirm: _vueTypes.default.any,
  filterReset: _vueTypes.default.any,
  emptyText: _vueTypes.default.any,
  selectAll: _vueTypes.default.any,
  selectInvert: _vueTypes.default.any,
  sortTitle: _vueTypes.default.string,
  expand: _vueTypes.default.string,
  collapse: _vueTypes.default.string
}).loose;

exports.TableLocale = TableLocale;

var RowSelectionType = _vueTypes.default.oneOf(['checkbox', 'radio']); // export type SelectionSelectFn<T> = (record: T, selected: boolean, selectedRows: Object[]) => any;


exports.RowSelectionType = RowSelectionType;
var TableRowSelection = {
  type: RowSelectionType,
  selectedRowKeys: _vueTypes.default.array,
  // onChange?: (selectedRowKeys: string[] | number[], selectedRows: Object[]) => any;
  getCheckboxProps: _vueTypes.default.func,
  // onSelect?: SelectionSelectFn<T>;
  // onSelectAll?: (selected: boolean, selectedRows: Object[], changeRows: Object[]) => any;
  // onSelectInvert?: (selectedRows: Object[]) => any;
  selections: _vueTypes.default.oneOfType([_vueTypes.default.array, _vueTypes.default.bool]),
  hideDefaultSelections: _vueTypes.default.bool,
  fixed: _vueTypes.default.bool,
  columnWidth: _vueTypes.default.oneOfType([_vueTypes.default.string, _vueTypes.default.number]),
  selectWay: _vueTypes.default.oneOf(['onSelect', 'onSelectMultiple', 'onSelectAll', 'onSelectInvert']),
  columnTitle: _vueTypes.default.any
};
exports.TableRowSelection = TableRowSelection;
var TableProps = {
  prefixCls: _vueTypes.default.string,
  dropdownPrefixCls: _vueTypes.default.string,
  rowSelection: _vueTypes.default.oneOfType([_vueTypes.default.shape(TableRowSelection).loose, Object]),
  pagination: _vueTypes.default.oneOfType([_vueTypes.default.shape(_objectSpread(_objectSpread({}, PaginationProps), {}, {
    position: _vueTypes.default.oneOf(['top', 'bottom', 'both'])
  })).loose, _vueTypes.default.bool]),
  size: _vueTypes.default.oneOf(['default', 'middle', 'small', 'large']),
  dataSource: _vueTypes.default.array,
  components: _vueTypes.default.object,
  columns: _vueTypes.default.array,
  rowKey: _vueTypes.default.oneOfType([_vueTypes.default.string, _vueTypes.default.func]),
  rowClassName: _vueTypes.default.func,
  expandedRowRender: _vueTypes.default.any,
  defaultExpandAllRows: _vueTypes.default.bool,
  defaultExpandedRowKeys: _vueTypes.default.array,
  expandedRowKeys: _vueTypes.default.array,
  expandIconAsCell: _vueTypes.default.bool,
  expandIconColumnIndex: _vueTypes.default.number,
  expandRowByClick: _vueTypes.default.bool,
  loading: _vueTypes.default.oneOfType([_vueTypes.default.shape(SpinProps).loose, _vueTypes.default.bool]),
  locale: TableLocale,
  indentSize: _vueTypes.default.number,
  customRow: _vueTypes.default.func,
  customHeaderRow: _vueTypes.default.func,
  useFixedHeader: _vueTypes.default.bool,
  bordered: _vueTypes.default.bool,
  showHeader: _vueTypes.default.bool,
  footer: _vueTypes.default.func,
  title: _vueTypes.default.func,
  scroll: _vueTypes.default.object,
  childrenColumnName: _vueTypes.default.oneOfType([_vueTypes.default.array, _vueTypes.default.string]),
  bodyStyle: _vueTypes.default.any,
  sortDirections: _vueTypes.default.array,
  tableLayout: _vueTypes.default.string,
  getPopupContainer: _vueTypes.default.func,
  expandIcon: _vueTypes.default.func,
  transformCellText: _vueTypes.default.func,
  onExpandedRowsChange: _vueTypes.default.func,
  onExpand: _vueTypes.default.func,
  onChange: _vueTypes.default.func,
  onRowClick: _vueTypes.default.func // style?: React.CSSProperties;
  // children?: React.ReactNode;

}; // export interface TableStateFilters {
//   [key: string]: string[];
// }
// export interface TableState<T> {
//   pagination: PaginationProps;
//   filters: TableStateFilters;
//   sortColumn: ColumnProps<T> | null;
//   sortOrder: PropTypes.string,
// }
// export type SelectionItemSelectFn = (key: string[]) => any;
// export interface SelectionItem {
//   key: PropTypes.string,
//   text: PropTypes.any,
//   onSelect: SelectionItemSelectFn;
// }

exports.TableProps = TableProps;
var SelectionCheckboxAllProps = {
  store: _createStore.Store,
  locale: _vueTypes.default.any,
  disabled: _vueTypes.default.bool,
  getCheckboxPropsByItem: _vueTypes.default.func,
  getRecordKey: _vueTypes.default.func,
  data: _vueTypes.default.array,
  prefixCls: _vueTypes.default.string,
  hideDefaultSelections: _vueTypes.default.bool,
  selections: _vueTypes.default.oneOfType([_vueTypes.default.array, _vueTypes.default.bool]),
  getPopupContainer: _vueTypes.default.func,
  onSelect: _vueTypes.default.func
}; // export interface SelectionCheckboxAllState {
//   checked: PropTypes.bool,
//   indeterminate: PropTypes.bool,
// }

exports.SelectionCheckboxAllProps = SelectionCheckboxAllProps;
var SelectionBoxProps = {
  store: _createStore.Store,
  type: RowSelectionType,
  defaultSelection: _vueTypes.default.arrayOf([_vueTypes.default.string, _vueTypes.default.number]),
  rowIndex: _vueTypes.default.oneOfType([_vueTypes.default.string, _vueTypes.default.number]),
  name: _vueTypes.default.string,
  disabled: _vueTypes.default.bool,
  id: _vueTypes.default.string // onChange: React.ChangeEventHandler<HTMLInputElement>;

}; // export interface SelectionBoxState {
//   checked?: PropTypes.bool,
// }

exports.SelectionBoxProps = SelectionBoxProps;
var FilterMenuProps = {
  locale: TableLocale,
  selectedKeys: _vueTypes.default.arrayOf([_vueTypes.default.string, _vueTypes.default.number]),
  column: _vueTypes.default.object,
  confirmFilter: _vueTypes.default.func,
  prefixCls: _vueTypes.default.string,
  dropdownPrefixCls: _vueTypes.default.string,
  getPopupContainer: _vueTypes.default.func,
  handleFilter: _vueTypes.default.func
}; // export interface FilterMenuState {
//   selectedKeys: string[];
//   keyPathOfSelectedItem: { [key: string]: string };
//   visible?: PropTypes.bool,
// }

exports.FilterMenuProps = FilterMenuProps;