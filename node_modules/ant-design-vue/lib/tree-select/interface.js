"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeSelectProps = exports.TreeData = void 0;

var _vueTypes = _interopRequireDefault(require("../_util/vue-types"));

var _select = require("../select");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TreeData = _vueTypes.default.shape({
  key: _vueTypes.default.string,
  value: _vueTypes.default.string,
  label: _vueTypes.default.any,
  scopedSlots: _vueTypes.default.object,
  children: _vueTypes.default.array
}).loose;

exports.TreeData = TreeData;

var TreeSelectProps = function TreeSelectProps() {
  return _objectSpread(_objectSpread({}, (0, _select.AbstractSelectProps)()), {}, {
    autofocus: _vueTypes.default.bool,
    dropdownStyle: _vueTypes.default.object,
    filterTreeNode: _vueTypes.default.oneOfType([Function, Boolean]),
    getPopupContainer: _vueTypes.default.func,
    labelInValue: _vueTypes.default.bool,
    loadData: _vueTypes.default.func,
    maxTagCount: _vueTypes.default.number,
    maxTagPlaceholder: _vueTypes.default.any,
    value: _vueTypes.default.oneOfType([_vueTypes.default.string, _vueTypes.default.object, _vueTypes.default.array, _vueTypes.default.number]),
    defaultValue: _vueTypes.default.oneOfType([_vueTypes.default.string, _vueTypes.default.object, _vueTypes.default.array, _vueTypes.default.number]),
    multiple: _vueTypes.default.bool,
    notFoundContent: _vueTypes.default.any,
    searchPlaceholder: _vueTypes.default.string,
    searchValue: _vueTypes.default.string,
    showCheckedStrategy: _vueTypes.default.oneOf(['SHOW_ALL', 'SHOW_PARENT', 'SHOW_CHILD']),
    suffixIcon: _vueTypes.default.any,
    treeCheckable: _vueTypes.default.oneOfType([_vueTypes.default.any, _vueTypes.default.bool]),
    treeCheckStrictly: _vueTypes.default.bool,
    treeData: _vueTypes.default.arrayOf(Object),
    treeDataSimpleMode: _vueTypes.default.oneOfType([Boolean, Object]),
    dropdownClassName: _vueTypes.default.string,
    dropdownMatchSelectWidth: _vueTypes.default.bool,
    treeDefaultExpandAll: _vueTypes.default.bool,
    treeExpandedKeys: _vueTypes.default.array,
    treeIcon: _vueTypes.default.bool,
    treeDefaultExpandedKeys: _vueTypes.default.array,
    treeNodeFilterProp: _vueTypes.default.string,
    treeNodeLabelProp: _vueTypes.default.string,
    replaceFields: _vueTypes.default.object.def({}),
    clearIcon: _vueTypes.default.any,
    removeIcon: _vueTypes.default.any,
    onSelect: _vueTypes.default.func,
    onChange: _vueTypes.default.func,
    onSearch: _vueTypes.default.func,
    onTreeExpand: _vueTypes.default.func,
    'onUpdate:treeExpandedKeys': _vueTypes.default.func,
    'onUpdate:searchValue': _vueTypes.default.func,
    'onUpdate:value': _vueTypes.default.func
  });
};

exports.TreeSelectProps = TreeSelectProps;