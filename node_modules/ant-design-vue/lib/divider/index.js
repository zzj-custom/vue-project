"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vue = require("vue");

var _vueTypes = _interopRequireDefault(require("../_util/vue-types"));

var _configProvider = require("../config-provider");

var _propsUtil = require("../_util/props-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Divider = {
  name: 'ADivider',
  props: {
    prefixCls: _vueTypes.default.string,
    type: _vueTypes.default.oneOf(['horizontal', 'vertical', '']).def('horizontal'),
    dashed: _vueTypes.default.bool,
    orientation: _vueTypes.default.oneOf(['left', 'right', 'center'])
  },
  setup: function setup() {
    return {
      configProvider: (0, _vue.inject)('configProvider', _configProvider.ConfigConsumerProps)
    };
  },
  render: function render() {
    var _classString;

    var customizePrefixCls = this.prefixCls,
        type = this.type,
        dashed = this.dashed,
        _this$orientation = this.orientation,
        orientation = _this$orientation === void 0 ? 'center' : _this$orientation;
    var getPrefixCls = this.configProvider.getPrefixCls;
    var prefixCls = getPrefixCls('divider', customizePrefixCls);
    var orientationPrefix = orientation.length > 0 ? '-' + orientation : orientation;
    var children = (0, _propsUtil.getSlot)(this);
    var classString = (_classString = {}, _defineProperty(_classString, prefixCls, true), _defineProperty(_classString, "".concat(prefixCls, "-").concat(type), true), _defineProperty(_classString, "".concat(prefixCls, "-with-text").concat(orientationPrefix), children.length), _defineProperty(_classString, "".concat(prefixCls, "-dashed"), !!dashed), _classString);
    return (0, _vue.createVNode)("div", {
      "class": classString,
      "role": "separator"
    }, [!!children.length && (0, _vue.createVNode)("span", {
      "class": "".concat(prefixCls, "-inner-text")
    }, [children])]);
  }
};
/* istanbul ignore next */

Divider.install = function (app) {
  app.component(Divider.name, Divider);
};

var _default = Divider;
exports.default = _default;