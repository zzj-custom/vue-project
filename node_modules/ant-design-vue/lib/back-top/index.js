"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vue = require("vue");

var _classNames = _interopRequireDefault(require("../_util/classNames"));

var _vueTypes = _interopRequireDefault(require("../_util/vue-types"));

var _backTopTypes = _interopRequireDefault(require("./backTopTypes"));

var _addEventListener = _interopRequireDefault(require("../vc-util/Dom/addEventListener"));

var _getScroll = _interopRequireDefault(require("../_util/getScroll"));

var _BaseMixin = _interopRequireDefault(require("../_util/BaseMixin"));

var _getTransitionProps = _interopRequireDefault(require("../_util/getTransitionProps"));

var _configProvider = require("../config-provider");

var _scrollTo = _interopRequireDefault(require("../_util/scrollTo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getDefaultTarget() {
  return window;
}

var props = (0, _backTopTypes.default)();
var BackTop = {
  name: 'ABackTop',
  inheritAttrs: false,
  mixins: [_BaseMixin.default],
  props: _objectSpread(_objectSpread({}, props), {}, {
    visibilityHeight: _vueTypes.default.number.def(400)
  }),
  setup: function setup() {
    return {
      configProvider: (0, _vue.inject)('configProvider', _configProvider.ConfigConsumerProps)
    };
  },
  data: function data() {
    this.scrollEvent = null;
    return {
      visible: false
    };
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      var getTarget = _this.target || getDefaultTarget;
      _this.scrollEvent = (0, _addEventListener.default)(getTarget(), 'scroll', _this.handleScroll);

      _this.handleScroll();
    });
  },
  beforeUnmount: function beforeUnmount() {
    if (this.scrollEvent) {
      this.scrollEvent.remove();
    }
  },
  methods: {
    getCurrentScrollTop: function getCurrentScrollTop() {
      var getTarget = this.target || getDefaultTarget;
      var targetNode = getTarget();

      if (targetNode === window) {
        return window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
      }

      return targetNode.scrollTop;
    },
    scrollToTop: function scrollToTop(e) {
      var _this$target = this.target,
          target = _this$target === void 0 ? getDefaultTarget : _this$target;
      (0, _scrollTo.default)(0, {
        getContainer: target
      });
      this.$emit('click', e);
    },
    handleScroll: function handleScroll() {
      var visibilityHeight = this.visibilityHeight,
          _this$target2 = this.target,
          target = _this$target2 === void 0 ? getDefaultTarget : _this$target2;
      var scrollTop = (0, _getScroll.default)(target(), true);
      this.setState({
        visible: scrollTop > visibilityHeight
      });
    }
  },
  render: function render() {
    var customizePrefixCls = this.prefixCls,
        $slots = this.$slots;
    var getPrefixCls = this.configProvider.getPrefixCls;
    var prefixCls = getPrefixCls('back-top', customizePrefixCls);
    var classString = (0, _classNames.default)(prefixCls, this.$attrs.class);
    var defaultElement = (0, _vue.createVNode)("div", {
      "class": "".concat(prefixCls, "-content")
    }, [(0, _vue.createVNode)("div", {
      "class": "".concat(prefixCls, "-icon")
    }, null)]);

    var divProps = _objectSpread(_objectSpread({}, this.$attrs), {}, {
      onClick: this.scrollToTop,
      class: classString
    });

    var backTopBtn = this.visible ? (0, _vue.createVNode)("div", divProps, [$slots.default && $slots.default() || defaultElement]) : null;
    var transitionProps = (0, _getTransitionProps.default)('fade');
    return (0, _vue.createVNode)(_vue.Transition, transitionProps, {
      default: function _default() {
        return [backTopBtn];
      }
    });
  }
};
/* istanbul ignore next */

BackTop.install = function (app) {
  app.component(BackTop.name, BackTop);
};

var _default2 = BackTop;
exports.default = _default2;