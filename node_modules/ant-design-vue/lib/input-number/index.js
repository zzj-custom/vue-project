"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InputNumberProps = void 0;

var _vue = require("vue");

var _vueTypes = _interopRequireDefault(require("../_util/vue-types"));

var _propsUtil = require("../_util/props-util");

var _classNames2 = _interopRequireDefault(require("../_util/classNames"));

var _UpOutlined = _interopRequireDefault(require("@ant-design/icons-vue/UpOutlined"));

var _DownOutlined = _interopRequireDefault(require("@ant-design/icons-vue/DownOutlined"));

var _src = _interopRequireDefault(require("../vc-input-number/src"));

var _configProvider = require("../config-provider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var InputNumberProps = {
  prefixCls: _vueTypes.default.string,
  min: _vueTypes.default.number,
  max: _vueTypes.default.number,
  value: _vueTypes.default.oneOfType([_vueTypes.default.number, _vueTypes.default.string]),
  step: _vueTypes.default.oneOfType([_vueTypes.default.number, _vueTypes.default.string]),
  defaultValue: _vueTypes.default.oneOfType([_vueTypes.default.number, _vueTypes.default.string]),
  tabindex: _vueTypes.default.number,
  disabled: _vueTypes.default.bool,
  size: _vueTypes.default.oneOf(['large', 'small', 'default']),
  formatter: _vueTypes.default.func,
  parser: _vueTypes.default.func,
  decimalSeparator: _vueTypes.default.string,
  placeholder: _vueTypes.default.string,
  name: _vueTypes.default.string,
  id: _vueTypes.default.string,
  precision: _vueTypes.default.number,
  autofocus: _vueTypes.default.bool
};
exports.InputNumberProps = InputNumberProps;
var InputNumber = {
  name: 'AInputNumber',
  inheritAttrs: false,
  props: (0, _propsUtil.initDefaultProps)(InputNumberProps, {
    step: 1
  }),
  setup: function setup() {
    return {
      configProvider: (0, _vue.inject)('configProvider', _configProvider.ConfigConsumerProps)
    };
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      if (process.env.NODE_ENV === 'test') {
        if (_this.autofocus && !_this.disabled) {
          _this.focus();
        }
      }
    });
  },
  methods: {
    saveInputNumber: function saveInputNumber(inputNumberRef) {
      this.inputNumberRef = inputNumberRef;
    },
    focus: function focus() {
      this.inputNumberRef.focus();
    },
    blur: function blur() {
      this.inputNumberRef.blur();
    }
  },
  render: function render() {
    var _classNames;

    var _getOptionProps$this$ = _objectSpread(_objectSpread({}, (0, _propsUtil.getOptionProps)(this)), this.$attrs),
        customizePrefixCls = _getOptionProps$this$.prefixCls,
        size = _getOptionProps$this$.size,
        className = _getOptionProps$this$.class,
        others = _objectWithoutProperties(_getOptionProps$this$, ["prefixCls", "size", "class"]);

    var getPrefixCls = this.configProvider.getPrefixCls;
    var prefixCls = getPrefixCls('input-number', customizePrefixCls);
    var inputNumberClass = (0, _classNames2.default)((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === 'large'), _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === 'small'), _classNames), className);
    var upIcon = (0, _vue.createVNode)(_UpOutlined.default, {
      "class": "".concat(prefixCls, "-handler-up-inner")
    }, null);
    var downIcon = (0, _vue.createVNode)(_DownOutlined.default, {
      "class": "".concat(prefixCls, "-handler-down-inner")
    }, null);

    var vcInputNumberprops = _objectSpread(_objectSpread({
      prefixCls: prefixCls,
      upHandler: upIcon,
      downHandler: downIcon
    }, others), {}, {
      class: inputNumberClass
    });

    return (0, _vue.createVNode)(_src.default, (0, _vue.mergeProps)(vcInputNumberprops, {
      "ref": this.saveInputNumber
    }), null);
  }
};
/* istanbul ignore next */

InputNumber.install = function (app) {
  app.component(InputNumber.name, InputNumber);
};

var _default = InputNumber;
exports.default = _default;