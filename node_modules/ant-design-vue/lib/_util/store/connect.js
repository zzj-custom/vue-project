"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = connect;

var _shallowequal = _interopRequireDefault(require("../shallowequal"));

var _vue = require("vue");

var _omit = _interopRequireDefault(require("omit.js"));

var _propsUtil = require("../props-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getDisplayName(WrappedComponent) {
  return WrappedComponent.name || 'Component';
}

var defaultMapStateToProps = function defaultMapStateToProps() {
  return {};
};

function connect(mapStateToProps) {
  var shouldSubscribe = !!mapStateToProps;
  var finalMapStateToProps = mapStateToProps || defaultMapStateToProps;
  return function wrapWithConnect(WrappedComponent) {
    var tempProps = (0, _omit.default)(WrappedComponent.props || {}, ['store']);
    var props = {};
    Object.keys(tempProps).forEach(function (k) {
      props[k] = _objectSpread(_objectSpread({}, tempProps[k]), {}, {
        required: false
      });
    });
    var Connect = {
      name: "Connect_".concat(getDisplayName(WrappedComponent)),
      inheritAttrs: false,
      props: props,
      setup: function setup() {
        return {
          storeContext: (0, _vue.inject)('storeContext', {})
        };
      },
      data: function data() {
        var _this = this;

        this.store = this.storeContext.store;
        this.preProps = (0, _propsUtil.getOptionProps)(this);
        (0, _vue.watchEffect)(function () {
          if (mapStateToProps && mapStateToProps.length === 2) {
            _this.subscribed = finalMapStateToProps(_this.store.getState(), _this.$props);
          }
        });
        return {
          subscribed: finalMapStateToProps(this.store.getState(), this.$props)
        };
      },
      mounted: function mounted() {
        this.trySubscribe();
      },
      beforeUnmount: function beforeUnmount() {
        this.tryUnsubscribe();
      },
      methods: {
        handleChange: function handleChange() {
          if (!this.unsubscribe) {
            return;
          }

          var props = (0, _propsUtil.getOptionProps)(this);
          var nextSubscribed = finalMapStateToProps(this.store.getState(), props);

          if (!(0, _shallowequal.default)(this.preProps, props) || !(0, _shallowequal.default)(this.subscribed, nextSubscribed)) {
            this.subscribed = nextSubscribed;
          }
        },
        trySubscribe: function trySubscribe() {
          if (shouldSubscribe) {
            this.unsubscribe = this.store.subscribe(this.handleChange);
            this.handleChange();
          }
        },
        tryUnsubscribe: function tryUnsubscribe() {
          if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = null;
          }
        },
        getWrappedInstance: function getWrappedInstance() {
          return this.$refs.wrappedInstance;
        }
      },
      render: function render() {
        var _this$$slots = this.$slots,
            $slots = _this$$slots === void 0 ? {} : _this$$slots,
            subscribed = this.subscribed,
            store = this.store,
            $attrs = this.$attrs;
        var props = (0, _propsUtil.getOptionProps)(this);
        this.preProps = _objectSpread({}, props);

        var wrapProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, props), subscribed), $attrs), {}, {
          store: store,
          ref: 'wrappedInstance'
        }); // const slots = {};
        // for (let [key, value] of Object.entries($slots)) {
        //   slots[key] = () => value();
        // }


        return (0, _vue.createVNode)(WrappedComponent, wrapProps, $slots);
      }
    };
    return Connect;
  };
}