"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ANT_MARK = void 0;

var _vue = require("vue");

var _vueTypes = _interopRequireDefault(require("../_util/vue-types"));

var _moment = _interopRequireDefault(require("moment"));

var _interopDefault = _interopRequireDefault(require("../_util/interopDefault"));

var _locale = require("../modal/locale");

var _warning = _interopRequireDefault(require("../_util/warning"));

var _propsUtil = require("../_util/props-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// export interface Locale {
//   locale: string;
//   Pagination?: Object;
//   DatePicker?: Object;
//   TimePicker?: Object;
//   Calendar?: Object;
//   Table?: Object;
//   Modal?: ModalLocale;
//   Popconfirm?: Object;
//   Transfer?: Object;
//   Select?: Object;
//   Upload?: Object;
// }
var ANT_MARK = 'internalMark';
exports.ANT_MARK = ANT_MARK;

function setMomentLocale(locale) {
  if (locale && locale.locale) {
    (0, _interopDefault.default)(_moment.default).locale(locale.locale);
  } else {
    (0, _interopDefault.default)(_moment.default).locale('en');
  }
}

var LocaleProvider = {
  name: 'ALocaleProvider',
  props: {
    locale: _vueTypes.default.object.def(function () {
      return {};
    }),
    _ANT_MARK__: _vueTypes.default.string
  },
  data: function data() {
    (0, _warning.default)(this._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead');
    return {
      antLocale: _objectSpread(_objectSpread({}, this.locale), {}, {
        exist: true
      })
    };
  },
  watch: {
    locale: function locale(val) {
      this.antLocale = _objectSpread(_objectSpread({}, val), {}, {
        exist: true
      });
      setMomentLocale(val);
      (0, _locale.changeConfirmLocale)(val && val.Modal);
    }
  },
  created: function created() {
    (0, _vue.provide)('localeData', this.$data);
    var locale = this.locale;
    setMomentLocale(locale);
    (0, _locale.changeConfirmLocale)(locale && locale.Modal);
  },
  beforeUnmount: function beforeUnmount() {
    (0, _locale.changeConfirmLocale)();
  },
  render: function render() {
    return (0, _propsUtil.getSlot)(this);
  }
};
/* istanbul ignore next */

LocaleProvider.install = function (app) {
  app.component(LocaleProvider.name, LocaleProvider);
};

var _default = LocaleProvider;
exports.default = _default;