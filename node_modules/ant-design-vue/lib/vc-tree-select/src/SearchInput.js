"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vue = require("vue");

var _antInputDirective = _interopRequireDefault(require("../../_util/antInputDirective"));

var _vueTypes = _interopRequireDefault(require("../../_util/vue-types"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SearchInput = {
  name: 'SearchInput',
  inheritAttrs: false,
  props: {
    open: _vueTypes.default.bool,
    searchValue: _vueTypes.default.string,
    prefixCls: _vueTypes.default.string,
    disabled: _vueTypes.default.bool,
    renderPlaceholder: _vueTypes.default.func,
    needAlign: _vueTypes.default.bool,
    ariaId: _vueTypes.default.string
  },
  setup: function setup() {
    return {
      vcTreeSelect: (0, _vue.inject)('vcTreeSelect', {})
    };
  },
  data: function data() {
    return {
      mirrorSearchValue: this.searchValue
    };
  },
  watch: {
    searchValue: function searchValue(val) {
      this.mirrorSearchValue = val;
    }
  },
  created: function created() {
    this.inputRef = (0, _util.createRef)();
    this.mirrorInputRef = (0, _util.createRef)();
    this.prevProps = _objectSpread({}, this.$props);
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      var _this$$props = _this.$props,
          open = _this$$props.open,
          needAlign = _this$$props.needAlign;

      if (needAlign) {
        _this.alignInputWidth();
      }

      if (open) {
        _this.focus(true);
      }
    });
  },
  updated: function updated() {
    var _this2 = this;

    var _this$$props2 = this.$props,
        open = _this$$props2.open,
        searchValue = _this$$props2.searchValue,
        needAlign = _this$$props2.needAlign;
    var prevProps = this.prevProps;
    this.$nextTick(function () {
      if (open && prevProps.open !== open) {
        _this2.focus();
      }

      if (needAlign && searchValue !== prevProps.searchValue) {
        _this2.alignInputWidth();
      }

      _this2.prevProps = _objectSpread({}, _this2.$props);
    });
  },
  methods: {
    /**
     * `scrollWidth` is not correct in IE, do the workaround.
     * ref: https://github.com/react-component/tree-select/issues/65
     *  clientWidth 0 when mounted in vue. why?
     */
    alignInputWidth: function alignInputWidth() {
      this.inputRef.current.style.width = "".concat(this.mirrorInputRef.current.clientWidth || this.mirrorInputRef.current.offsetWidth, "px");
    },

    /**
     * Need additional timeout for focus cause parent dom is not ready when didMount trigger
     */
    focus: function focus(isDidMount) {
      var _this3 = this;

      if (this.inputRef.current) {
        if (isDidMount) {
          setTimeout(function () {
            _this3.inputRef.current.focus();
          }, 0);
        } else {
          // set it into else, Avoid scrolling when focus
          this.inputRef.current.focus();
        }
      }
    },
    blur: function blur() {
      if (this.inputRef.current) {
        this.inputRef.current.blur();
      }
    },
    handleInputChange: function handleInputChange(e) {
      var _e$target = e.target,
          value = _e$target.value,
          composing = _e$target.composing;
      var _this$searchValue = this.searchValue,
          searchValue = _this$searchValue === void 0 ? '' : _this$searchValue;

      if (e.isComposing || composing || searchValue === value) {
        this.mirrorSearchValue = value;
        return;
      }

      this.vcTreeSelect.onSearchInputChange(e);
    }
  },
  render: function render() {
    var _this$$props3 = this.$props,
        searchValue = _this$$props3.searchValue,
        prefixCls = _this$$props3.prefixCls,
        disabled = _this$$props3.disabled,
        renderPlaceholder = _this$$props3.renderPlaceholder,
        open = _this$$props3.open,
        ariaId = _this$$props3.ariaId;
    var onSearchInputKeyDown = this.vcTreeSelect.onSearchInputKeyDown,
        handleInputChange = this.handleInputChange,
        mirrorSearchValue = this.mirrorSearchValue;
    return (0, _vue.createVNode)("span", {
      "class": "".concat(prefixCls, "-search__field__wrap")
    }, [(0, _vue.withDirectives)((0, _vue.createVNode)("input", {
      "type": "text",
      "ref": this.inputRef,
      "onInput": handleInputChange,
      "onChange": handleInputChange,
      "onKeydown": onSearchInputKeyDown,
      "value": searchValue,
      "disabled": disabled,
      "class": "".concat(prefixCls, "-search__field"),
      "aria-label": "filter select",
      "aria-autocomplete": "list",
      "aria-controls": open ? ariaId : undefined,
      "aria-multiline": "false"
    }, null), [[_antInputDirective.default]]), (0, _vue.createVNode)("span", {
      "ref": this.mirrorInputRef,
      "class": "".concat(prefixCls, "-search__field__mirror")
    }, [mirrorSearchValue, (0, _vue.createTextVNode)("\xA0")]), renderPlaceholder && !mirrorSearchValue ? renderPlaceholder() : null]);
  }
};
var _default = SearchInput;
exports.default = _default;