"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vue = require("vue");

var _vcMenu = require("../vc-menu");

var _propsUtil = require("../_util/props-util");

var _tooltip = _interopRequireDefault(require("../tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function noop() {}

var _default2 = {
  name: 'MenuItem',
  inheritAttrs: false,
  props: _vcMenu.itemProps,
  isMenuItem: true,
  setup: function setup() {
    return {
      getInlineCollapsed: (0, _vue.inject)('getInlineCollapsed', noop),
      layoutSiderContext: (0, _vue.inject)('layoutSiderContext', {})
    };
  },
  methods: {
    onKeyDown: function onKeyDown(e) {
      this.$refs.menuItem.onKeyDown(e);
    }
  },
  render: function render() {
    var props = (0, _propsUtil.getOptionProps)(this);
    var level = props.level,
        title = props.title,
        rootPrefixCls = props.rootPrefixCls;
    var getInlineCollapsed = this.getInlineCollapsed,
        attrs = this.$attrs;
    var inlineCollapsed = getInlineCollapsed();
    var tooltipTitle = title;
    var children = (0, _propsUtil.getSlot)(this);

    if (typeof title === 'undefined') {
      tooltipTitle = level === 1 ? children : '';
    } else if (title === false) {
      tooltipTitle = '';
    }

    var tooltipProps = {
      title: tooltipTitle
    };
    var siderCollapsed = this.layoutSiderContext.sCollapsed;

    if (!siderCollapsed && !inlineCollapsed) {
      tooltipProps.title = null; // Reset `visible` to fix control mode tooltip display not correct
      // ref: https://github.com/ant-design/ant-design/issues/16742

      tooltipProps.visible = false;
    }

    var itemProps = _objectSpread(_objectSpread(_objectSpread({}, props), {}, {
      title: title
    }, attrs), {}, {
      ref: 'menuItem'
    });

    var toolTipProps = _objectSpread(_objectSpread({}, tooltipProps), {}, {
      placement: 'right',
      overlayClassName: "".concat(rootPrefixCls, "-inline-collapsed-tooltip")
    });

    var item = (0, _vue.createVNode)(_vcMenu.Item, itemProps, {
      default: function _default() {
        return [children];
      }
    });
    return (0, _vue.createVNode)(_tooltip.default, toolTipProps, {
      default: function _default() {
        return [item];
      }
    });
  }
};
exports.default = _default2;