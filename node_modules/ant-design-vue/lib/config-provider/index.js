"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ConfigConsumerProps = void 0;

var _vue = require("vue");

var _vueTypes = _interopRequireDefault(require("../_util/vue-types"));

var _propsUtil = require("../_util/props-util");

var _renderEmpty = _interopRequireDefault(require("./renderEmpty"));

var _localeProvider = _interopRequireWildcard(require("../locale-provider"));

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getWatch() {
  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var watch = {};
  keys.forEach(function (k) {
    watch[k] = function (value) {
      this.configProvider[k] = value;
    };
  });
  return watch;
}

var ConfigProvider = {
  name: 'AConfigProvider',
  props: {
    getPopupContainer: _vueTypes.default.func,
    prefixCls: _vueTypes.default.string,
    renderEmpty: _vueTypes.default.func,
    csp: _vueTypes.default.object,
    autoInsertSpaceInButton: _vueTypes.default.bool,
    locale: _vueTypes.default.object,
    pageHeader: _vueTypes.default.object,
    transformCellText: _vueTypes.default.func
  },
  created: function created() {
    this.configProvider = (0, _vue.reactive)(_objectSpread(_objectSpread({}, this.$props), {}, {
      getPrefixCls: this.getPrefixCls,
      renderEmpty: this.renderEmptyComponent
    }));
    (0, _vue.provide)('configProvider', this.configProvider);
  },
  watch: _objectSpread({}, getWatch(['prefixCls', 'csp', 'autoInsertSpaceInButton', 'locale', 'pageHeader', 'transformCellText'])),
  methods: {
    renderEmptyComponent: function renderEmptyComponent(name) {
      var renderEmpty = (0, _propsUtil.getComponent)(this, 'renderEmpty', {}, false) || _renderEmpty.default;

      return renderEmpty(name);
    },
    getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
      var _this$$props$prefixCl = this.$props.prefixCls,
          prefixCls = _this$$props$prefixCl === void 0 ? 'ant' : _this$$props$prefixCl;
      if (customizePrefixCls) return customizePrefixCls;
      return suffixCls ? "".concat(prefixCls, "-").concat(suffixCls) : prefixCls;
    },
    renderProvider: function renderProvider(legacyLocale) {
      var _this = this;

      return (0, _vue.createVNode)(_localeProvider.default, {
        "locale": this.locale || legacyLocale,
        "_ANT_MARK__": _localeProvider.ANT_MARK
      }, {
        default: function _default() {
          return [(0, _propsUtil.getSlot)(_this)];
        }
      });
    }
  },
  render: function render() {
    var _this2 = this;

    return (0, _vue.createVNode)(_LocaleReceiver.default, {
      "children": function children(_, __, legacyLocale) {
        return _this2.renderProvider(legacyLocale);
      }
    }, null);
  }
};
var ConfigConsumerProps = {
  getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls) return customizePrefixCls;
    return "ant-".concat(suffixCls);
  },
  renderEmpty: _renderEmpty.default
};
/* istanbul ignore next */

exports.ConfigConsumerProps = ConfigConsumerProps;

ConfigProvider.install = function (app) {
  app.component(ConfigProvider.name, ConfigProvider);
};

var _default2 = ConfigProvider;
exports.default = _default2;