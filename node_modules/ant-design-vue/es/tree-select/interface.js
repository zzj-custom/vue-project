function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import PropTypes from '../_util/vue-types';
import { AbstractSelectProps } from '../select';
export var TreeData = PropTypes.shape({
  key: PropTypes.string,
  value: PropTypes.string,
  label: PropTypes.any,
  scopedSlots: PropTypes.object,
  children: PropTypes.array
}).loose;
export var TreeSelectProps = function TreeSelectProps() {
  return _objectSpread(_objectSpread({}, AbstractSelectProps()), {}, {
    autofocus: PropTypes.bool,
    dropdownStyle: PropTypes.object,
    filterTreeNode: PropTypes.oneOfType([Function, Boolean]),
    getPopupContainer: PropTypes.func,
    labelInValue: PropTypes.bool,
    loadData: PropTypes.func,
    maxTagCount: PropTypes.number,
    maxTagPlaceholder: PropTypes.any,
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.array, PropTypes.number]),
    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.array, PropTypes.number]),
    multiple: PropTypes.bool,
    notFoundContent: PropTypes.any,
    searchPlaceholder: PropTypes.string,
    searchValue: PropTypes.string,
    showCheckedStrategy: PropTypes.oneOf(['SHOW_ALL', 'SHOW_PARENT', 'SHOW_CHILD']),
    suffixIcon: PropTypes.any,
    treeCheckable: PropTypes.oneOfType([PropTypes.any, PropTypes.bool]),
    treeCheckStrictly: PropTypes.bool,
    treeData: PropTypes.arrayOf(Object),
    treeDataSimpleMode: PropTypes.oneOfType([Boolean, Object]),
    dropdownClassName: PropTypes.string,
    dropdownMatchSelectWidth: PropTypes.bool,
    treeDefaultExpandAll: PropTypes.bool,
    treeExpandedKeys: PropTypes.array,
    treeIcon: PropTypes.bool,
    treeDefaultExpandedKeys: PropTypes.array,
    treeNodeFilterProp: PropTypes.string,
    treeNodeLabelProp: PropTypes.string,
    replaceFields: PropTypes.object.def({}),
    clearIcon: PropTypes.any,
    removeIcon: PropTypes.any,
    onSelect: PropTypes.func,
    onChange: PropTypes.func,
    onSearch: PropTypes.func,
    onTreeExpand: PropTypes.func,
    'onUpdate:treeExpandedKeys': PropTypes.func,
    'onUpdate:searchValue': PropTypes.func,
    'onUpdate:value': PropTypes.func
  });
};