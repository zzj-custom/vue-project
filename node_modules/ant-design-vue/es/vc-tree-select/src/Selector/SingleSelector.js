import { createVNode } from "vue";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import generateSelector, { selectorPropTypes } from '../Base/BaseSelector';
import { toTitle } from '../util';
import { getOptionProps } from '../../../_util/props-util';
import { createRef } from '../util';
var Selector = generateSelector('single');
var SingleSelector = {
  name: 'SingleSelector',
  inheritAttrs: false,
  props: selectorPropTypes(),
  created: function created() {
    this.selectorRef = createRef();
  },
  methods: {
    focus: function focus() {
      this.selectorRef.current.focus();
    },
    blur: function blur() {
      this.selectorRef.current.blur();
    },
    renderSelection: function renderSelection() {
      var _this$$props = this.$props,
          selectorValueList = _this$$props.selectorValueList,
          placeholder = _this$$props.placeholder,
          prefixCls = _this$$props.prefixCls;
      var innerNode;

      if (selectorValueList.length) {
        var _selectorValueList$ = selectorValueList[0],
            label = _selectorValueList$.label,
            value = _selectorValueList$.value;
        innerNode = createVNode("span", {
          "key": "value",
          "title": toTitle(label),
          "class": "".concat(prefixCls, "-selection-selected-value")
        }, [label || value]);
      } else {
        innerNode = createVNode("span", {
          "key": "placeholder",
          "class": "".concat(prefixCls, "-selection__placeholder")
        }, [placeholder]);
      }

      return createVNode("span", {
        "class": "".concat(prefixCls, "-selection__rendered")
      }, [innerNode]);
    }
  },
  render: function render() {
    var props = _objectSpread(_objectSpread(_objectSpread({}, getOptionProps(this)), this.$attrs), {}, {
      renderSelection: this.renderSelection,
      ref: this.selectorRef
    });

    return createVNode(Selector, props, null);
  }
};
export default SingleSelector;