import { inject, createVNode } from "vue";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { ConfigConsumerProps } from '../config-provider';
import { getComponent } from '../_util/props-util';
import PropTypes from '../_util/vue-types';
export default {
  name: 'AAvatar',
  props: {
    prefixCls: {
      type: String,
      default: undefined
    },
    shape: {
      validator: function validator(val) {
        return ['circle', 'square'].includes(val);
      },
      default: 'circle'
    },
    size: {
      validator: function validator(val) {
        return typeof val === 'number' || ['small', 'large', 'default'].includes(val);
      },
      default: 'default'
    },
    src: String,

    /** Srcset of image avatar */
    srcSet: String,
    icon: PropTypes.any,
    alt: String,
    loadError: Function
  },
  setup: function setup() {
    return {
      configProvider: inject('configProvider', ConfigConsumerProps)
    };
  },
  data: function data() {
    return {
      isImgExist: true,
      isMounted: false,
      scale: 1
    };
  },
  watch: {
    src: function src() {
      var _this = this;

      this.$nextTick(function () {
        _this.isImgExist = true;
        _this.scale = 1; // force uodate for position

        _this.$forceUpdate();
      });
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    this.$nextTick(function () {
      _this2.setScale();

      _this2.isMounted = true;
    });
  },
  updated: function updated() {
    var _this3 = this;

    this.$nextTick(function () {
      _this3.setScale();
    });
  },
  methods: {
    setScale: function setScale() {
      if (!this.$refs.avatarChildren || !this.$refs.avatarNode) {
        return;
      }

      var childrenWidth = this.$refs.avatarChildren.offsetWidth; // offsetWidth avoid affecting be transform scale

      var nodeWidth = this.$refs.avatarNode.offsetWidth; // denominator is 0 is no meaning

      if (childrenWidth === 0 || nodeWidth === 0 || this.lastChildrenWidth === childrenWidth && this.lastNodeWidth === nodeWidth) {
        return;
      }

      this.lastChildrenWidth = childrenWidth;
      this.lastNodeWidth = nodeWidth; // add 4px gap for each side to get better performance

      this.scale = nodeWidth - 8 < childrenWidth ? (nodeWidth - 8) / childrenWidth : 1;
    },
    handleImgLoadError: function handleImgLoadError() {
      var loadError = this.$props.loadError;
      var errorFlag = loadError ? loadError() : undefined;

      if (errorFlag !== false) {
        this.isImgExist = false;
      }
    }
  },
  render: function render() {
    var _sizeCls, _objectSpread3;

    var _this$$props = this.$props,
        customizePrefixCls = _this$$props.prefixCls,
        shape = _this$$props.shape,
        size = _this$$props.size,
        src = _this$$props.src,
        alt = _this$$props.alt,
        srcSet = _this$$props.srcSet;
    var icon = getComponent(this, 'icon');
    var getPrefixCls = this.configProvider.getPrefixCls;
    var prefixCls = getPrefixCls('avatar', customizePrefixCls);
    var _this$$data = this.$data,
        isImgExist = _this$$data.isImgExist,
        scale = _this$$data.scale,
        isMounted = _this$$data.isMounted;
    var sizeCls = (_sizeCls = {}, _defineProperty(_sizeCls, "".concat(prefixCls, "-lg"), size === 'large'), _defineProperty(_sizeCls, "".concat(prefixCls, "-sm"), size === 'small'), _sizeCls);

    var classString = _objectSpread(_objectSpread(_defineProperty({}, prefixCls, true), sizeCls), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, "".concat(prefixCls, "-").concat(shape), shape), _defineProperty(_objectSpread3, "".concat(prefixCls, "-image"), src && isImgExist), _defineProperty(_objectSpread3, "".concat(prefixCls, "-icon"), icon), _objectSpread3));

    var sizeStyle = typeof size === 'number' ? {
      width: "".concat(size, "px"),
      height: "".concat(size, "px"),
      lineHeight: "".concat(size, "px"),
      fontSize: icon ? "".concat(size / 2, "px") : '18px'
    } : {};
    var children = this.$slots.default && this.$slots.default();

    if (src && isImgExist) {
      children = createVNode("img", {
        "src": src,
        "srcSet": srcSet,
        "onError": this.handleImgLoadError,
        "alt": alt
      }, null);
    } else if (icon) {
      children = icon;
    } else {
      var childrenNode = this.$refs.avatarChildren;

      if (childrenNode || scale !== 1) {
        var transformString = "scale(".concat(scale, ") translateX(-50%)");
        var childrenStyle = {
          msTransform: transformString,
          WebkitTransform: transformString,
          transform: transformString
        };
        var sizeChildrenStyle = typeof size === 'number' ? {
          lineHeight: "".concat(size, "px")
        } : {};
        children = createVNode("span", {
          "class": "".concat(prefixCls, "-string"),
          "ref": "avatarChildren",
          "style": _objectSpread(_objectSpread({}, sizeChildrenStyle), childrenStyle)
        }, [children]);
      } else {
        var _childrenStyle = {};

        if (!isMounted) {
          _childrenStyle.opacity = 0;
        }

        children = createVNode("span", {
          "class": "".concat(prefixCls, "-string"),
          "ref": "avatarChildren",
          "style": {
            opacity: 0
          }
        }, [children]);
      }
    }

    return createVNode("span", {
      "ref": "avatarNode",
      "class": classString,
      "style": sizeStyle
    }, [children]);
  }
};