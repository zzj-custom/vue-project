import { createVNode } from "vue";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { switchPropTypes } from './PropTypes';
import BaseMixin from '../_util/BaseMixin';
import { hasProp, getOptionProps, getComponent } from '../_util/props-util';
import Omit from 'omit.js'; // function noop () {
// }

export default {
  name: 'VcSwitch',
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _objectSpread(_objectSpread({}, switchPropTypes), {}, {
    prefixCls: switchPropTypes.prefixCls.def('rc-switch') // onChange: switchPropTypes.onChange.def(noop),
    // onClick: switchPropTypes.onClick.def(noop),

  }),
  data: function data() {
    var checked = false;

    if (hasProp(this, 'checked')) {
      checked = !!this.checked;
    } else {
      checked = !!this.defaultChecked;
    }

    return {
      stateChecked: checked
    };
  },
  watch: {
    checked: function checked(val) {
      this.stateChecked = val;
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      var autofocus = _this.autofocus,
          disabled = _this.disabled;

      if (autofocus && !disabled) {
        _this.focus();
      }
    });
  },
  methods: {
    saveRef: function saveRef(c) {
      this.refSwitchNode = c;
    },
    setChecked: function setChecked(checked, e) {
      if (this.disabled) {
        return;
      }

      if (!hasProp(this, 'checked')) {
        this.stateChecked = checked;
      }

      this.__emit('change', checked, e);

      this.__emit('update:checked', checked);
    },
    handleClick: function handleClick(e) {
      var checked = !this.stateChecked;
      this.setChecked(checked, e);

      this.__emit('click', checked, e);
    },
    handleKeyDown: function handleKeyDown(e) {
      if (e.keyCode === 37) {
        // Left
        this.setChecked(false, e);
      } else if (e.keyCode === 39) {
        // Right
        this.setChecked(true, e);
      }
    },
    handleMouseUp: function handleMouseUp(e) {
      var _this$refSwitchNode;

      (_this$refSwitchNode = this.refSwitchNode) === null || _this$refSwitchNode === void 0 ? void 0 : _this$refSwitchNode.blur();

      this.__emit('mouseup', e);
    },
    focus: function focus() {
      var _this$refSwitchNode2;

      (_this$refSwitchNode2 = this.refSwitchNode) === null || _this$refSwitchNode2 === void 0 ? void 0 : _this$refSwitchNode2.focus();
    },
    blur: function blur() {
      var _this$refSwitchNode3;

      (_this$refSwitchNode3 = this.refSwitchNode) === null || _this$refSwitchNode3 === void 0 ? void 0 : _this$refSwitchNode3.blur();
    }
  },
  render: function render() {
    var _switchClassName;

    var _getOptionProps = getOptionProps(this),
        prefixCls = _getOptionProps.prefixCls,
        disabled = _getOptionProps.disabled,
        loadingIcon = _getOptionProps.loadingIcon,
        restProps = _objectWithoutProperties(_getOptionProps, ["prefixCls", "disabled", "loadingIcon"]);

    var checked = this.stateChecked;
    var $attrs = this.$attrs;
    var switchClassName = (_switchClassName = {}, _defineProperty(_switchClassName, $attrs.class, $attrs.class), _defineProperty(_switchClassName, prefixCls, true), _defineProperty(_switchClassName, "".concat(prefixCls, "-checked"), checked), _defineProperty(_switchClassName, "".concat(prefixCls, "-disabled"), disabled), _switchClassName);

    var spanProps = _objectSpread(_objectSpread(_objectSpread({}, Omit(restProps, ['checkedChildren', 'unCheckedChildren', 'checked', 'autofocus', 'defaultChecked'])), $attrs), {}, {
      onKeydown: this.handleKeyDown,
      onClick: this.handleClick,
      onMouseup: this.handleMouseUp,
      type: 'button',
      role: 'switch',
      'aria-checked': checked,
      disabled: disabled,
      class: switchClassName,
      ref: this.saveRef
    });

    return createVNode("button", spanProps, [loadingIcon, createVNode("span", {
      "class": "".concat(prefixCls, "-inner")
    }, [checked ? getComponent(this, 'checkedChildren') : getComponent(this, 'unCheckedChildren')])]);
  }
};