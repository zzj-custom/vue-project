import { createVNode } from "vue";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import CalendarOutlined from '@ant-design/icons-vue/CalendarOutlined';
import { isValidElement } from '../_util/props-util';
import { cloneElement } from '../_util/vnode';
import classNames from '../_util/classNames';

var InputIcon = function InputIcon(_, _ref) {
  var _suffixIcon$props, _suffixIcon$props2, _classNames;

  var attrs = _ref.attrs;
  var suffixIcon = attrs.suffixIcon,
      prefixCls = attrs.prefixCls;
  return (suffixIcon && isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
    class: classNames((_classNames = {}, _defineProperty(_classNames, (_suffixIcon$props = suffixIcon.props) === null || _suffixIcon$props === void 0 ? void 0 : _suffixIcon$props.class, (_suffixIcon$props2 = suffixIcon.props) === null || _suffixIcon$props2 === void 0 ? void 0 : _suffixIcon$props2.class), _defineProperty(_classNames, "".concat(prefixCls, "-picker-icon"), true), _classNames))
  }) : createVNode("span", {
    "class": "".concat(prefixCls, "-picker-icon")
  }, [suffixIcon])) || createVNode(CalendarOutlined, {
    "class": "".concat(prefixCls, "-picker-icon")
  }, null);
};

InputIcon.inheritAttrs = false;
export default InputIcon;