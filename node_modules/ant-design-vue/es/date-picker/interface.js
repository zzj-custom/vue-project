function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// import { TimePickerProps } from '../time-picker'
import PropTypes from '../_util/vue-types';
import { TimesType, TimeType } from '../_util/moment-util';
export var PickerProps = function PickerProps() {
  return {
    name: PropTypes.string,
    transitionName: PropTypes.string,
    prefixCls: PropTypes.string,
    inputPrefixCls: PropTypes.string,
    format: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.func]),
    disabled: PropTypes.bool,
    allowClear: PropTypes.bool,
    suffixIcon: PropTypes.any,
    popupStyle: PropTypes.object,
    dropdownClassName: PropTypes.string,
    locale: PropTypes.any,
    localeCode: PropTypes.string,
    size: PropTypes.oneOf(['large', 'small', 'default']),
    getCalendarContainer: PropTypes.func,
    open: PropTypes.bool,
    disabledDate: PropTypes.func,
    showToday: PropTypes.bool,
    dateRender: PropTypes.any,
    // ({current: moment.Moment, today: moment.Moment}) => vNode,
    pickerClass: PropTypes.string,
    pickerInputClass: PropTypes.string,
    timePicker: PropTypes.any,
    autofocus: PropTypes.bool,
    tagPrefixCls: PropTypes.string,
    tabindex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    align: PropTypes.object.def(function () {
      return {};
    }),
    inputReadOnly: PropTypes.bool,
    valueFormat: PropTypes.string,
    onOpenChange: PropTypes.func,
    onFocus: PropTypes.func,
    onBlur: PropTypes.func,
    'onUpdate:value': PropTypes.func,
    onMouseenter: PropTypes.func,
    onMouseleave: PropTypes.func
  };
};
export var SinglePickerProps = function SinglePickerProps() {
  return {
    value: TimeType,
    defaultValue: TimeType,
    defaultPickerValue: TimeType,
    renderExtraFooter: PropTypes.any,
    placeholder: PropTypes.string,
    onChange: PropTypes.func
  };
};
export var DatePickerProps = function DatePickerProps() {
  return _objectSpread(_objectSpread(_objectSpread({}, PickerProps()), SinglePickerProps()), {}, {
    showTime: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
    open: PropTypes.bool,
    disabledTime: PropTypes.func,
    mode: PropTypes.oneOf(['time', 'date', 'month', 'year']),
    onOpenChange: PropTypes.func,
    onPanelChange: PropTypes.func,
    onOk: PropTypes.func
  });
};
export var MonthPickerProps = function MonthPickerProps() {
  return _objectSpread(_objectSpread(_objectSpread({}, PickerProps()), SinglePickerProps()), {}, {
    placeholder: PropTypes.string,
    monthCellContentRender: PropTypes.func
  });
}; // export const RangePickerPresetRange = PropTypes.oneOfType([TimesType, PropTypes.func])

export var RangePickerProps = function RangePickerProps() {
  return _objectSpread(_objectSpread({}, PickerProps()), {}, {
    tagPrefixCls: PropTypes.string,
    value: TimesType,
    defaultValue: TimesType,
    defaultPickerValue: TimesType,
    timePicker: PropTypes.any,
    showTime: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
    ranges: PropTypes.object,
    placeholder: PropTypes.arrayOf(String),
    mode: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(String)]),
    separator: PropTypes.any,
    disabledTime: PropTypes.func,
    showToday: PropTypes.bool,
    renderExtraFooter: PropTypes.any,
    onChange: PropTypes.func,
    onCalendarChange: PropTypes.func,
    onOk: PropTypes.func,
    onPanelChange: PropTypes.func,
    onMouseenter: PropTypes.func,
    onMouseleave: PropTypes.func
  });
};
export var WeekPickerProps = function WeekPickerProps() {
  return _objectSpread(_objectSpread(_objectSpread({}, PickerProps()), SinglePickerProps()), {}, {
    placeholder: PropTypes.string
  });
}; // export interface DatePickerDecorator extends React.ClassicComponentClass<DatePickerProps> {
//   RangePicker: React.ClassicComponentClass<RangePickerProps>;
//   MonthPicker: React.ClassicComponentClass<MonthPickerProps>;
//   WeekPicker: React.ClassicComponentClass<WeexPickerProps>;
// }