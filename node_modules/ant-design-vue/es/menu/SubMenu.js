import { inject, createVNode } from "vue";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { SubMenu as VcSubMenu } from '../vc-menu';
import classNames from '../_util/classNames';
import Omit from 'omit.js';
import { getSlot } from '../_util/props-util';
export default {
  name: 'ASubMenu',
  isSubMenu: true,
  inheritAttrs: false,
  props: _objectSpread({}, VcSubMenu.props),
  setup: function setup() {
    return {
      menuPropsContext: inject('menuPropsContext', {})
    };
  },
  methods: {
    onKeyDown: function onKeyDown(e) {
      this.$refs.subMenu.onKeyDown(e);
    }
  },
  render: function render() {
    var _this = this;

    var $slots = this.$slots,
        $attrs = this.$attrs;
    var _this$$props = this.$props,
        rootPrefixCls = _this$$props.rootPrefixCls,
        popupClassName = _this$$props.popupClassName;
    var antdMenuTheme = this.menuPropsContext.theme;

    var props = _objectSpread(_objectSpread(_objectSpread({}, this.$props), {}, {
      popupClassName: classNames("".concat(rootPrefixCls, "-").concat(antdMenuTheme), popupClassName),
      ref: 'subMenu'
    }, $attrs), Omit($slots, ['default']));

    return createVNode(VcSubMenu, props, {
      default: function _default() {
        return [getSlot(_this)];
      }
    });
  }
};