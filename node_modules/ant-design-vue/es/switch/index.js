import { inject, createVNode } from "vue";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import LoadingOutlined from '@ant-design/icons-vue/LoadingOutlined';
import PropTypes from '../_util/vue-types';
import hasProp, { getOptionProps, getComponent } from '../_util/props-util';
import VcSwitch from '../vc-switch';
import Wave from '../_util/wave';
import { ConfigConsumerProps } from '../config-provider';
import warning from '../_util/warning';
var Switch = {
  name: 'ASwitch',
  __ANT_SWITCH: true,
  inheritAttrs: false,
  props: {
    prefixCls: PropTypes.string,
    // size=default and size=large are the same
    size: PropTypes.oneOf(['small', 'default', 'large']),
    disabled: PropTypes.bool,
    checkedChildren: PropTypes.any,
    unCheckedChildren: PropTypes.any,
    tabindex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    checked: PropTypes.bool,
    defaultChecked: PropTypes.bool,
    autofocus: PropTypes.bool,
    loading: PropTypes.bool
  },
  setup: function setup() {
    return {
      configProvider: inject('configProvider', ConfigConsumerProps)
    };
  },
  methods: {
    focus: function focus() {
      var _this$refSwitchNode;

      (_this$refSwitchNode = this.refSwitchNode) === null || _this$refSwitchNode === void 0 ? void 0 : _this$refSwitchNode.focus();
    },
    blur: function blur() {
      var _this$refSwitchNode2;

      (_this$refSwitchNode2 = this.refSwitchNode) === null || _this$refSwitchNode2 === void 0 ? void 0 : _this$refSwitchNode2.blur();
    },
    saveRef: function saveRef(c) {
      this.refSwitchNode = c;
    }
  },
  created: function created() {
    warning(hasProp(this, 'checked') || !('value' in this.$attrs), 'Switch', '`value` is not validate prop, do you mean `checked`?');
  },
  render: function render() {
    var _classes;

    var _getOptionProps = getOptionProps(this),
        customizePrefixCls = _getOptionProps.prefixCls,
        size = _getOptionProps.size,
        loading = _getOptionProps.loading,
        disabled = _getOptionProps.disabled,
        restProps = _objectWithoutProperties(_getOptionProps, ["prefixCls", "size", "loading", "disabled"]);

    var getPrefixCls = this.configProvider.getPrefixCls;
    var prefixCls = getPrefixCls('switch', customizePrefixCls);
    var $attrs = this.$attrs;
    var classes = (_classes = {}, _defineProperty(_classes, $attrs.class, $attrs.class), _defineProperty(_classes, "".concat(prefixCls, "-small"), size === 'small'), _defineProperty(_classes, "".concat(prefixCls, "-loading"), loading), _classes);
    var loadingIcon = loading ? createVNode(LoadingOutlined, {
      "class": "".concat(prefixCls, "-loading-icon")
    }, null) : null;

    var switchProps = _objectSpread(_objectSpread(_objectSpread({}, restProps), $attrs), {}, {
      prefixCls: prefixCls,
      loadingIcon: loadingIcon,
      checkedChildren: getComponent(this, 'checkedChildren'),
      unCheckedChildren: getComponent(this, 'unCheckedChildren'),
      disabled: disabled || loading,
      class: classes,
      ref: this.saveRef
    });

    var comp = createVNode(VcSwitch, switchProps, null);
    return createVNode(Wave, {
      "insertExtraNode": true
    }, {
      default: function _default() {
        return [comp];
      }
    });
  }
};
/* istanbul ignore next */

Switch.install = function (app) {
  app.component(Switch.name, Switch);
};

export default Switch;